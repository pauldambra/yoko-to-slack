service: poll-for-toots

frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-lift

provider:
  stage: dev
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  lambdaHashingVersion: 20201221
  logRetentionInDays: 5
  tracing:
    lambda: true
  architecture: arm64
  environment:
    TWITTER_BEARER_TOKEN: ${env:BEARER}
    DYNAMO_TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'Fn::GetAtt': [YokoToSlackTable, Arn]
    - Effect: Allow
      Action:
        - rekognition:DetectLabels
      Resource:
        - '*'
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so, we can use it while testing locally
  tableName: ${self:custom.stage}-yoko-to-slack


constructs:
  mediatoots:
    type: queue
    worker:
      handler: slurp-to-labelling/handler.run

functions:
  rateHandler:
    handler: poll-for-toots/handler.run
    environment:
      TOOTED_PHOTOS_QUEUE: ${construct:mediatoots.queueUrl}
    events:
      - schedule: rate(5 minutes)

resources:
  Resources:
    YokoToSlackTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

