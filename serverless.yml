service: poll-for-toots

frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-lift

provider:
  stage: dev
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  lambdaHashingVersion: 20201221
  logRetentionInDays: 5
  tracing:
    lambda: true
  architecture: arm64
  logs:
    httpApi: true
  httpApi:
    cors: true
  environment:
    TWITTER_BEARER_TOKEN: ${env:BEARER}
    DYNAMO_TABLE_NAME: ${self:custom.tableName}
    DYNAMO_SESSION_STORE: ${self:custom.sessionStoreTableName}
    SLACK_CLIENT_ID: ${env:SLACK_CLIENT_ID}
    SLACK_SECRET: ${env:SLACK_SECRET}
    API_URL: { "Fn::Join": [
        "",
      [
          "https://",
        {
          "Ref": "HttpApi"
        },
          ".execute-api.",
        {
          "Ref": "AWS::Region"
        },
          ".",
        {
          "Ref": "AWS::URLSuffix"
        }
      ]
    ]
  }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'Fn::GetAtt': [YokoToSlackTable, Arn]
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dyanmodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'Fn::GetAtt': [SessionStoreTable, Arn]
    - Effect: Allow
      Action:
        - rekognition:DetectLabels
      Resource:
        - '*'
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so, we can use it while testing locally
  tableName: ${self:custom.stage}-yoko-to-slack
  sessionStoreTableName: ${self:custom.stage}-yoko-to-slack-session-store

constructs:
  landing:
    type: static-website
    path: dist
  dogtoots:
    type: queue
    worker:
      handler: sling-to-slack/handler.run
      environment:
        SLACK_WEBHOOK_URL: ${env:SLACK_WEBHOOK_URL}
  mediatoots:
    type: queue
    worker:
      handler: slurp-to-labelling/handler.run
      environment:
        FOUND_DOG_QUEUE: ${construct:dogtoots.queueUrl}
      iamRoleStatements:
        - Effect: Allow
          Action:
            - rekognition:DetectLabels
          Resource:
            - '*'

functions:
  oAuth:
    handler: oauth/handler.run
    environment:
      LANDING_PAGE: ${construct:landing.cname}
    events:
      - httpApi:
          path: '/connect'
          method: '*'
      - httpApi:
          path: '/connect/slack'
          method: '*'
      - httpApi:
          path: '/connect/slack/callback'
          method: '*'
      - httpApi:
          path: '/connect/slack/on-complete'
          method: '*'
  pollToots:
    handler: poll-for-toots/handler.run
    environment:
      TOOTED_PHOTOS_QUEUE: ${construct:mediatoots.queueUrl}
    events:
      - schedule: rate(5 minutes)
  slingToSlack:
    handler: sling-to-slack/handler.run

resources:
  Resources:
    YokoToSlackTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: lookup
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: lookup
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    SessionStoreTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sessionStoreTableName}
        AttributeDefinitions:
          - AttributeName: sid
            AttributeType: S
        KeySchema:
          - AttributeName: sid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST